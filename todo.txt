sh4fd5va_d4mA3JsmY3m

- ordonner les items de la liste
- ajout page de setting

1- regler l'affichage de la modification
2- regler le pbm de la base 64
3- s'attaquer a la modificatiuon des modifications (ne pas oublier le pbm de changement de poste ...)

5- bouclage du projet et test de begining + pull to refresh
6- penser a la resolution des conflits et amelioration de l'interface graphique

// travail sur les poste:
    * diviser creation en: creation employe + ajout des postes
    * diviser modification en: modification employe + ajout/modif/suppr des postes

1- remplacer la creation par une modification
2- remplacer une modification par une autre modification
3- mettre en place un system de process rapide des operations


3- mettre en place un systeme infailllible pour les CRUD
4- afficher les feedback de modification
5- regler le pbm des images volumineux ==> stocker dans des fichiers: utiliser la meme strategy que tiny

1- Dessiner le nouveau design sur papier
   Tester les animations
   Voir si transclude est possible
   Mettre en place la gestion des titres

2- Trouver un bon jeu de couleur
3- Réarranger les elements
5- Redisigner ajout de poste
6- Appliquer les changements

==> Ajout achevé
7- Differencier ajout, modification et update dans edition employe


9- Implementer modification
10- Mettre en place un pull to refresh&



1- eviter les leak de contexte
2- Isoler ce qui est variable de ce qui est statique (vue, model, service, content provider)
3- Evider de surcharger des services en background (CentralSA a remodeler totalement)
4- Repenser a une methode de nommage:
    - Factory
    - Service metiers
    - Business Delegates
    - des elements des views
5- Mettre en place les differents couleurs en premier + sketch des differents ecrans
6- Mettre glide en premier lieu [ chargement des bitmaps et des ressources ] + better load
8- Mettre en place les Exceptions en premier lieu et un bon moyen de les afficher
9- Mettre plus de flexibilite dans l'interface + gestion de la rotKation de l'ecran
10- Si offline: mettre un system de ressource qui consomme moins
11- Faire attention au souscriptions de Rx ---> Toujours coupler avec RxAndroid et RxLifeCycle
12- Surveiller la memoire des les premiere etapes
13- isoler ce qui peut etre mis en module ( les differents pickers, les nouveau vue ) ---> Mettre dans Mahery GitHub
14- Prevoir comment les packages vont etre reparti!
15- ne pas garder d super reference static
16- Se preparer a tous les NullPointers
17- Documenter parceque toi m9eme tu n'y comprendras rien a la fin :p
18- Prevoir l'utiliKsation de plusieurs sortes d'appareil des le debut
19- Prevoir une bonne structuration des dimensions et des strings

a) how to create library
b) how to test unit with android
c) how to use fragment
d) how to better use recycle view
d) how to uml before coding
e) prepare yourself for change: ANTICIPATE


- améliorer le rendu de l'histoçrique des postes
- ajouter des plus de filtre pour les recherches


ask:
1- type de ressource a prendre en compte
2- dimension (when to up / down)
3- when there is no ressource, which to use


6- Mettre en place un systeme qui permettrait de stocker des bases 64 dans des fichiers temporaire et de les retrouver ( >2 Mb)

1- Creer un view group de type header
2- inserer header au debut de chaque fradgment list

